/// Day 5 JS Objects
/// Ver 1.1
/// by dEv jAna
/// last edited 5-19-2016

"If anything is good for pounding humility into you permanently, it's the restaurant business." Anthony Bourdain

objectives:
introduce objects and use them in a meaningful way
reinforce understanding of arrays
reinforce cumulative nature of problem solving

object
  properties

syntax:
  var OBJNAME = {
    TEXTPROPERTY:"TEXTVALUE",
    NUMBERPROPERTY:NUMBER
  };

Our client wants a program that will help keep track of the tables in their restaurant. We'll need the ability to add tables with name, capacity, status, and server. Then change these as needed in real time.
The client also wants to view a report at any time of tables and by status: open, seated, served, paid, dirty.

////////////////////////////////

set up html with text input for table name and button click
add select for capacity
console logs still

add local object newTable for creation

add global array tables[]
push to global when created
console log global var and show object in console

add listTables function - show nested objects (still console log)
refactor to print tables by line

add output div
refactor listTables to use innerHTML of div

questions and break

------- break -------

add statusNameIn as text input to html
add statusIn as text input to html
add updateStatus function to js, but just make sure it gets the info first

add a loop through tables object to check for the name given and update status if so
otherwise alert "table not found"

if time allows:
add a button to each table that cycles through it's status

//// IN LIST TABLES
var line = tables[i].name + " - capacity: " + tables[i].capacity + ', status: <button onClick="cycleStatus(' + i + ')">' + tables[i].status + "</button>";
document.getElementById('output').innerHTML += '<p>' + line + '</p>';

/// FUNCTION CALLED ON BUTTON CLICK
var cycleStatus = function( index ){
  switch( tables[index].status ){
    case  'empty':
        tables[index].status = 'seated';
        break;
    case  'seated':
        tables[index].status = 'served';
        break;
    case  'served':
        tables[index].status = 'dirty';
        break;
    case  'dirty':
        tables[index].status = 'empty';
        break;
    default:
      tables[index].status = 'empty';
  }
  listTables();
}

challenge them to write data control if time allows
